name: Backend CI/CD

on:
  pull_request:
    branches: [main]
    paths:
      - 'apps/liminal-api/**'
      - '.github/workflows/backend-ci.yml'
  push:
    branches: [main]
    paths:
      - 'apps/liminal-api/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Convex types
        working-directory: apps/liminal-api
        run: npx convex codegen

      # Format Check (Fail Fast)
      - name: Format Check
        id: format
        if: ${{ vars.DISABLE_FORMAT_CHECK != 'true' }}
        run: |
          echo "Checking code formatting..."
          if ! pnpm format:check; then
            echo "::error::Code formatting issues found"
            echo ""
            echo "To fix this:"
            echo "1. Run: pnpm format:fix"
            echo "2. Commit the changes"
            echo "3. Configure Prettier in your IDE for future changes"
            echo "4. Consider setting up the git pre-commit hook"
            echo ""
            echo "This usually means you didn't run the commitprep workflow locally."
            exit 1
          fi

      - name: Format Check Disabled Warning
        if: ${{ vars.DISABLE_FORMAT_CHECK == 'true' }}
        run: |
          echo "::warning::⚠️ FORMAT CHECK IS DISABLED"
          echo "Format checking is currently disabled via DISABLE_FORMAT_CHECK repository variable."

      # Security Scanning (Critical - Stop on fail)
      - name: TruffleHog Security Scan
        if: ${{ vars.DISABLE_SECURITY_CHECK != 'true' }}
        uses: trufflesecurity/trufflehog@v3.89.2
        with:
          path: ./
          base: main
          head: HEAD

      - name: Additional Security Checks
        id: security
        if: ${{ vars.DISABLE_SECURITY_CHECK != 'true' }}
        run: |
          echo "Running additional security checks..."
          pnpm precommit:env-files
          pnpm precommit:api-keys

      - name: Security Check Disabled Warning
        if: ${{ vars.DISABLE_SECURITY_CHECK == 'true' }}
        run: |
          echo "::error::⚠️ SECURITY CHECK IS DISABLED"
          echo "Security scanning is currently disabled via DISABLE_SECURITY_CHECK repository variable."
          echo "This is a critical security risk and should only be temporary."

      # Dependency Security (Stop on critical)
      - name: Dependency Security Audit
        if: ${{ vars.DISABLE_DEPENDENCY_AUDIT != 'true' }}
        run: |
          echo "Checking for vulnerable dependencies..."
          pnpm audit --prod

      - name: Dependency Audit Disabled Warning
        if: ${{ vars.DISABLE_DEPENDENCY_AUDIT == 'true' }}
        run: |
          echo "::warning::⚠️ DEPENDENCY AUDIT IS DISABLED"

      # Lint Check (Stop on errors)
      - name: Lint Check
        if: ${{ vars.DISABLE_LINT_CHECK != 'true' }}
        run: |
          echo "Running ESLint across all packages..."
          pnpm lint

      - name: Lint Check Disabled Warning
        if: ${{ vars.DISABLE_LINT_CHECK == 'true' }}
        run: |
          echo "::warning::⚠️ LINT CHECK IS DISABLED"

      # TypeScript Compilation (Stop on errors)
      - name: TypeScript Check
        if: ${{ vars.DISABLE_TYPECHECK != 'true' }}
        run: |
          echo "Checking TypeScript compilation..."
          pnpm typecheck

      - name: TypeScript Check Disabled Warning
        if: ${{ vars.DISABLE_TYPECHECK == 'true' }}
        run: |
          echo "::warning::⚠️ TYPESCRIPT CHECK IS DISABLED"

      # Integration Tests (Stop on failures)
      - name: Integration Tests
        if: ${{ vars.DISABLE_INTEGRATION_TESTS != 'true' }}
        working-directory: apps/liminal-api
        run: |
          echo "Running integration tests..."
          pnpm test

      - name: Integration Tests Disabled Warning
        if: ${{ vars.DISABLE_INTEGRATION_TESTS == 'true' }}
        run: |
          echo "::warning::⚠️ INTEGRATION TESTS ARE DISABLED"

      # Show disabled gates summary
      - name: Disabled Gates Summary
        if: ${{ vars.DISABLE_FORMAT_CHECK == 'true' || vars.DISABLE_SECURITY_CHECK == 'true' || vars.DISABLE_DEPENDENCY_AUDIT == 'true' || vars.DISABLE_LINT_CHECK == 'true' || vars.DISABLE_TYPECHECK == 'true' || vars.DISABLE_INTEGRATION_TESTS == 'true' }}
        run: |
          echo "## ⚠️ DISABLED QUALITY GATES ⚠️" >> $GITHUB_STEP_SUMMARY
          echo "The following gates are currently disabled:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ vars.DISABLE_FORMAT_CHECK }}" = "true" ]; then
            echo "- ❌ **Format Check** (DISABLE_FORMAT_CHECK=true)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ vars.DISABLE_SECURITY_CHECK }}" = "true" ]; then
            echo "- ❌ **Security Scan** (DISABLE_SECURITY_CHECK=true) 🚨 **CRITICAL RISK**" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ vars.DISABLE_DEPENDENCY_AUDIT }}" = "true" ]; then
            echo "- ❌ **Dependency Audit** (DISABLE_DEPENDENCY_AUDIT=true)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ vars.DISABLE_LINT_CHECK }}" = "true" ]; then
            echo "- ❌ **Lint Check** (DISABLE_LINT_CHECK=true)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ vars.DISABLE_TYPECHECK }}" = "true" ]; then
            echo "- ❌ **TypeScript Check** (DISABLE_TYPECHECK=true)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ vars.DISABLE_INTEGRATION_TESTS }}" = "true" ]; then
            echo "- ❌ **Integration Tests** (DISABLE_INTEGRATION_TESTS=true)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**To re-enable:** Go to Repository Settings → Secrets and variables → Actions → Variables" >> $GITHUB_STEP_SUMMARY

  # Staging Deployment (Only if all quality gates pass)
  staging-deployment:
    name: Staging Deployment
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Convex types
        working-directory: apps/liminal-api
        run: npx convex codegen

      - name: Deploy to Staging
        working-directory: apps/liminal-api
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_STAGING_DEPLOY_KEY }}
        run: |
          echo "Deploying to Convex staging environment..."
          npx convex deploy

      - name: Health Check Staging
        env:
          STAGING_URL: ${{ vars.CONVEX_STAGING_URL }}
        run: |
          echo "Running health check against staging environment..."

          # Validate staging URL is set
          if [ -z "$STAGING_URL" ]; then
            echo "::error::CONVEX_STAGING_URL is not set in repository variables"
            echo "Please configure CONVEX_STAGING_URL in Repository Settings → Secrets and variables → Actions → Variables"
            exit 1
          fi

          # Wait a moment for deployment to be ready
          sleep 10

          # Health check with timeout
          echo "Testing health endpoint: $STAGING_URL/health"
          if curl -f --max-time 30 "$STAGING_URL/health"; then
            echo "✅ Staging deployment successful and healthy"
          else
            echo "❌ Staging health check failed"
            echo "::error::Health check failed for $STAGING_URL/health"
            exit 1
          fi

      - name: Staging Deployment Summary
        run: |
          echo "## 🚀 Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "Backend successfully deployed to staging environment." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Staging URL:** ${{ vars.CONVEX_STAGING_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
